pipeline {
  agent any

  environment {
    DOCKER_REPO = "nikhilreddy99"
    IMAGE_NAME  = "chat-service"
    IMAGE_TAG   = "${env.BUILD_NUMBER}"
    IMAGE       = "${DOCKER_REPO}/${IMAGE_NAME}:${IMAGE_TAG}"
    KUBE_CONTEXT = "minikube"
    NAMESPACE    = "dev"
  }

  parameters {
    booleanParam(name: 'ROLLBACK', defaultValue: false, description: 'Rollback deployment?')
  }

  stages {
    stage('Checkout') {
      steps {
        git branch: 'main', url: 'https://github.com/NikhilReddy99/devops-challenge.git'
        sh 'ls -la'
      }
    }

    stage('Build JAR') {
      steps {
        dir('application/services/chat-service') {
          sh 'mvn -B clean package -DskipTests'
        }
      }
    }

    stage('Build Docker Image') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhub-creds', usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASS')]) {
          dir('application/services/chat-service') {
            sh """
              echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USER" --password-stdin
              docker build -t ${IMAGE} -f Dockerfile .
              docker push ${IMAGE}
              docker logout
            """
          }
        }
      }
    }

    stage('Image Scan') {
      steps {
        dir('application/services/chat-service') {
          sh "trivy image --exit-code 0 --format table -o trivy-report.txt ${IMAGE} || true"
          archiveArtifacts artifacts: 'application/services/chat-service/trivy-report.txt', fingerprint: true
        }
      }
    }

    stage('Terraform Init') {
      steps {
        dir('terraform/minikube-prometheus-terraform') {
          sh 'terraform init -input=false'
        }
      }
    }

    stage('Terraform Apply') {
      steps {
        dir('terraform/minikube-prometheus-terraform') {
          sh "terraform apply -auto-approve -var 'image=${IMAGE}' -var 'namespace=${NAMESPACE}'"
        }
      }
    }

    stage('Create DB Secret in Kubernetes') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'db-creds', usernameVariable: 'DB_USER', passwordVariable: 'DB_PASS')]) {
          sh """
            kubectl --context ${KUBE_CONTEXT} -n ${NAMESPACE} create secret generic db-secret \
              --from-literal=POSTGRES_USER=${DB_USER} \
              --from-literal=POSTGRES_PASSWORD=${DB_PASS} \
              --dry-run=client -o yaml | kubectl apply -f -
          """
        }
      }
    }

    stage('Wait & Verify') {
      steps {
        sh "kubectl --context ${KUBE_CONTEXT} -n ${NAMESPACE} rollout status deployment/chat-service --timeout=120s || true"
        sh "kubectl --context ${KUBE_CONTEXT} -n ${NAMESPACE} get pods -o wide || true"
      }
    }

    stage('Optional: Run smoke tests') {
      steps {
        echo 'Run smoke tests here if you have any'
      }
    }

    stage('Scan & Lint Terraform/K8s') {
      steps {
        sh 'tfsec terraform/ || true'
        sh 'checkov -d terraform/ || true'
        sh 'kube-score score kubernetes/manifests/**/*.yaml || true'
      }
    }

    stage('Rollback (Optional)') {
      when { expression { return params.ROLLBACK == true } }
      steps {
        input message: "Confirm rollback?"
        sh "kubectl --context ${KUBE_CONTEXT} -n ${NAMESPACE} rollout undo deployment/chat-service"
      }
    }
  }

  post {
    success { echo "Build #${env.BUILD_NUMBER} succeeded." }
    failure { echo "Build #${env.BUILD_NUMBER} failed." }
    always { cleanWs() }
  }
}
